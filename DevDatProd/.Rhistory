plot(x, y, type="b",
pch=21, col="red",
yaxt="n", lty=3, ann=FALSE)
lines(x, z, type="b", pch=22, col="blue", lty=2)
axis(2, at=x, labels=x, col.axis="red", las=2)
axis(4, at=z, labels=round(z, digits=2),
col.axis="blue", las=2, cex.axis=0.7, tck=-.01)
mtext("y=1/x", side=4, line=3, cex.lab=1, las=2, col="blue")
title("An Example of Creative Axes",
xlab="X values",
ylab="Y=X")
par(opar)
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
opar <- par(no.readonly=TRUE)
par(lwd=2, cex=1.5, font.lab=2)
plot(dose, drugA, type="b",
pch=15, lty=1, col="red", ylim=c(0, 60),
main="Drug A vs. Drug B",
xlab="Drug Dosage", ylab="Drug Response")
lines(dose, drugB, type="b",
pch=17, lty=2, col="blue")
abline(h=c(30), lwd=1.5, lty=2, col="gray")
library(Hmisc)
minor.tick(nx=3, ny=3, tick.ratio=0.5)
legend("topleft", inset=.05, title="Drug Type", c("A","B"),
lty=c(1, 2), pch=c(15, 17), col=c("red", "blue"))
par(opar)
attach(mtcars)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
attach(mtcars)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
attach(mtcars)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
attach(mtcars)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
attach(mtcars)
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(opar)
detach(mtcars)
source('C:/Users/aahumada.SA/MatLab/RStudio/StatInfer_ quiz_1.R')
p
x/sum(x)
source('C:/Users/aahumada.SA/MatLab/RStudio/quiz_lattice.R')
xyplot(weight ~ Time | Diet, BodyWeight)
data(nlme)
?nlme
str(BodyWeight)
library(datasets)
data(airquality)
str(airquality)
View(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month)
)
library(lattice)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess" )
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
source('C:/Users/aahumada.SA/MatLab/RStudio/quiz_lattice.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
ata(mtcars)
x <- mtcars$weight
y <- mtcars$mpg
plot(x,y)
lm(y ~ x , data = mtcars)
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
View(mtcars)
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
print("###[ Q7 ]###")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
q7 <- lm(y ~ x )
abline( coef = q7$coefficients )
print(q7)
mean(x)
mean(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
plot(x,x)
print("###[ Q9 ]###")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- x
plot(x,y)
q9 <- lm(y ~ x )
abline( coef = q9$coefficients )
print(q9)
mean(x)
print("###[ Q9 ]###")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- x
u <- c(0.573, 0.8, 0.36, 0.44)
plot(x,y)
q9 <- lm(y ~ x )
abline( coef = q9$coefficients )
print(q9)
s <- numeric(length(u))
for ( j in 1:length(u)) {
s[j] <- 0
for ( i in 1:length(x)) {
s[j] <- s[j] + (x[i]-u[j])^2
}
}
print( data.frame(cbind(u,s)))
print("###[ Q9 ]###")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- x
u <- c(0.573, 0.8, 0.36, 0.44)
s <- numeric(length(u))
for ( j in 1:length(u)) {
s[j] <- 0
for ( i in 1:length(x)) {
s[j] <- s[j] + (x[i]-u[j])^2
}
}
print( data.frame(cbind(u,s)))
print("###[ Q9 ]###")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- x
u <- c(0.573, 0.8, 0.36, 0.44)
s <- numeric(length(u))
for ( j in 1:length(u)) {
s[j] <- 0
for ( i in 1:length(x)) {
s[j] <- s[j] + (x[i]-u[j])^2
}
}
print(mean(x))
print( data.frame(cbind(u,s)))
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
2/5
sqrt(1)
sqrt(9)
3/2
1.5*0.4
4/5
source('C:/Users/aahumada.SA/MatLab/RStudio/regmods-q1/regmods-q1.R')
3/5
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/exam01.R')
install.packages("kernlab")
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/exam01.R')
smallSpam$capitalAve
View(spam)
dim(spam)[1]
dim(spam)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
sample(dim(spam)[1],size=10)
View(smallSpam)
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/exam01.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/caret01.R')
install.packages("kernlab")
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/caret01.R')
View(testing)
print( dim(training) )
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/caret01.R')
install.packages("e1071")
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
print( modelFit )
print( modelFit$finalModel )
predictions <- predict(modelFit,newdata=testing)
print(predictions )
print( confusionMatrix(predictions,testing$type) )
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/caret01.R')
set.seed(32323)
folds <- createFolds(y=spam$type,k=10, list=TRUE,returnTrain=TRUE)
print( sapply(folds,length) )
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/examples/caret01.R')
folds[[1]][1:10]
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
install.packages("AppliedPredictiveModeling")
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
View(testing)
View(testing)
View(trainIndex)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
View(predictors)
View(adData)
str(AlzheimerDisease)
str(diagnosis)
str(predictor)
str(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
View(mixtures)
View(testing)
View(training)
install.packages("Hmisc")
plot(mixtures$CompressiveStrength, inTrain)
plot(inTrain)
View(mixtures)
plot(mixtures$CompressiveStrength)
cut2(mixtures$CompressiveStrength, g=5)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(Hmisc)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
cut2(mixtures$CompressiveStrength, g=5)
plot(cut2(mixtures$CompressiveStrength, g=5))
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
#Q1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(trainIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(Hmisc)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
set.seed(3433)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL",names(training),values=TRUE)
grep("IL",names(training),value=TRUE)
grep("^IL",names(training),value=TRUE)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
sTrain <- inTrain[,c(grep("^IL",names(training),value=TRUE))]
prComp <- prcomp(sTrain)
plot(prComp$x[,1],prComp$x[,2])
sTrain <- inTrain[,grep("^IL",names(training),value=TRUE)]
prComp <- prcomp(sTrain)
idx <- grep("^IL",names(training),value=TRUE)
sTrain <- inTrain[,c(idx)]
sTrain <- inTrain[,idx]
c(idx)
idx
idx <- grep("^IL",names(training),value=TRUE)
sTrain <- training[,c(idx)]
View(sTrain)
prComp <- prcomp(sTrain)
plot(prComp$x[,1],prComp$x[,2])
table(prComp$x)
summary(prComp)
prComp$rotation
View(training)
#Q1
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData   <- data.frame(diagnosis,predictors)
inTrain  <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing  <- adData[-inTrain,]
idx    <- grep("^IL",names(training),value=TRUE)
sTrain <- training[,c(idx)]
prComp <- prcomp(sTrain)
summary(prComp)
modelFit <- train(diagnosis ~ c(idx),method="glm", preProcess="pca",data=training)
paste(idx,sep=",")
print( paste(idx,sep=","))
print( paste(c(idx),sep=","))
idx
class(idx)
sapply(idx,paste,sep=",")
lapply(idx,paste,sep=",")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData   <- data.frame(diagnosis,predictors)
inTrain  <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing  <- adData[-inTrain,]
idx    <- grep("^IL",names(training),value=TRUE)
sTrain <- training[,c(idx)]
prComp <- prcomp(sTrain)
print( summary(prComp) )
modelFit <- train(diagnosis ~ . ,method="glm", preProcess="pca",data=sTrain)
print(summary(modelFit))
View(sTrain)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData   <- data.frame(diagnosis,predictors)
inTrain  <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing  <- adData[-inTrain,]
idx    <- grep("^IL",names(training),value=TRUE)
sTrain <- training[,c(diagnosis, idx)]
prComp <- prcomp(sTrain)
print( summary(prComp) )
modelFit <- train(diagnosis ~ . ,method="glm", preProcess="pca",data=sTrain)
print(summary(modelFit))
View(sTrain)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData   <- data.frame(diagnosis,predictors)
inTrain  <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing  <- adData[-inTrain,]
idx    <- c( "diagnosis", grep("^IL",names(training),value=TRUE) )
sTrain <- training[,c(idx)]
prComp <- prcomp(sTrain)
print( summary(prComp) )
modelFit <- train(diagnosis ~ . ,method="glm", preProcess="pca",data=sTrain)
print(summary(modelFit))
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData   <- data.frame(diagnosis,predictors)
inTrain  <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing  <- adData[-inTrain,]
idx    <- c( "diagnosis", grep("^IL",names(training),value=TRUE) )
sTrain <- training[,c(idx)]
View(sTrain)
prComp <- prcomp(sTrain)
print( summary(prComp) )
prComp <- prcomp(sTrain[,-1])
print( summary(prComp) )
modelFit <- train(diagnosis ~ . ,method="glm", preProcess="pca",data=sTrain)
print(summary(modelFit))
modelFit$coefnames
modelFit$coef
prComp$x
source('C:/Users/aahumada.SA/MatLab/RStudio/PracticalMachineLearning/quiz/quiz2.R')
M       <- abs(cor(sTrain[,-1]))
diag(M) <- 0
print( which(M > 0.8,arr.ind=TRUE) )
which(M > 0.8,arr.ind=TRUE)
View(M)
View(M)
setwd("C:/Users/aahumada.SA/MatLab/RStudio/DevelopingDataProducts/project/DevDatProd")
source('C:/Users/aahumada.SA/MatLab/RStudio/DevelopingDataProducts/project/DevDatProd/init_app.R')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='aahumada', token='35F86A4D0F308196E443347D393EDA6D', secret='hGps/Vh2a5dP6YZSoTR06ee+4m/Ez+srUJqPVdwV')
deployApp()
library(shinyapps)
deployApp()
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
library(shinyapps)
deployApp()
